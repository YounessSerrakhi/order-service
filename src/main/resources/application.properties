spring.application.name=order-service
server.port=8083
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order_service?createDatabaseIfNotExist=true&useSSL=false&useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8
spring.datasource.username=root
spring.datasource.password=
spring.jpa.hibernate.ddl-auto=update

server.servlet.context-path=/api
# eureka server
# in order to find the eureka server
eureka.client.service-url.defaultZone=http://eureka:eureka@localhost:8761/eureka

management.health.circuitbreakers.enabled=true
# expose all actuator endpoints not just health endpoint
management.endpoints.web.exposure.include=*
# by default it is set to never
management.endpoint.health.show-details=always

# Resilience4j properties
# we want to register a health indicator for the circuit breaker so to be able to see the status of the circuit breaker in the health endpoint
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# how many times the circuit breaker should try to call the backend service before it opens the circuit breaker
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# so if a request fails not to open the circuit breaker immediately but to wait for some number of requests to fail before opening the circuit breaker
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
# after 5 requests fail then the circuit breaker will open
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# it means when 50% of the requests fail then the circuit breaker will open
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# how long the circuit breaker should wait before it tries to call the backend service again
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# how many requests should be allowed to go through when the circuit breaker is in half open state
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
# enable automatic transition from open to half open state
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

# Resilience4j Timeout properties
# how long wait for the response from the backend service before it times out and throws a timeout exception
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

# Resilience4j Retry properties
# how many times to retry the request before it fails
resilience4j.retry.instances.inventory.max-attempts=3
# how long to wait before retrying the request
resilience4j.retry.instances.inventory.wait-duration=5s

# zipkin
spring.zipkin.base-url=http://localhost:9411
# 1.0 what means that we want send 100% of the request which we are receiving to our system
# to zipkin we want start tracing 100% of the requests on our system
spring.sleuth.sampler.probability=1.0

# kafka Properties
# list of servers where we can find our kafka installation here it is installed on our local machine
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
# say to our spring boot not to serialize this key and value pair when send it to kafka broker
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# event: as random token value we provide
spring.kafka.producer.properties.spring.json.type.mapping=event:com.microservices.orderservice.event.OrderPlacedEvent














